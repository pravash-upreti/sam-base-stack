AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  HostWebsite:
    Type: String
    Default: true
    Description: Host website ? 
  
  BasePath:
    Type: String
    Default: api

  RootDomainName:
    Type: String
    Default: mydomain.com

  HostedZoneName:
    Type: String
    Default: example.mydomain.com
  
  CertificateARN:
    Type: String
    Default: ''
  DevOpsUser:
    Type: List<String>
    Default: app-developer
    Description: Devops Lead

  ProjectCustomer:
    Type: String
    Default: Leapfrog
    Description: Add Project customer

  ProjectName:
    Type: String
    Default: sam-project
    Description: Add Project name

  ProjectType:
    Type: String
    Default: temporary
    Description: Add Project type
  
  ProjectDescription:
    Type: String
    Default: Please provide description
    Description: Add Project description

  ProjectDeployment:
    Type: String
    Default: development
    Description: Add Project deployment

  CreateRDS:
    Description: Do you need RDS.
    Default: "false"
    Type: String
    AllowedValues: ["true", "false"]
  
  DBUser:
    Description: Database master user
    Default: "root"
    Type: String
  
  DBPassword:
    Description: Database master user's password
    NoEcho: true
    Default: "admin1234"
    Type: String

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-40cf2925
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-0bfbef7f
    Description: Private subnet A
    ConstraintDescription: must be the subnet id
  
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-7fc5331a
    Description: Private subnet B
    ConstraintDescription: must be the subnet id
  
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-660c5620
    Description: Public subnet A
    ConstraintDescription: must be the subnet id
  
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-09e8ee74ebe249541
    Description: Public subnet B
    ConstraintDescription: must be the subnet id
  
  RestApiBinaryMediaTypes:
    Type: String
    Default: '*~1*'
  

Conditions:
  ShouldCreateRDS:
    Fn::Equals: [true, Ref: CreateRDS]
  
  ShouldCreateWebsite:
    Fn::Equals: [true, Ref: HostWebsite]
  
#   Subnets:
#     Type: 'List<AWS::EC2::Subnet::Id>'
#     Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
#     ConstraintDescription: >-
#       must be a list of at least two existing subnets associated with at least
#       two different availability zones. They should be residing in the selected
#       Virtual Private Cloud.


 
Resources:

  LambdaToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ShouldCreateRDS
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306      
      GroupId:
        Ref: RDSSecurityGroup
      SourceSecurityGroupId:
        Ref: RDSSecurityGroup
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"


  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    #Condition: ShouldCreateRDS
    Properties:
      GroupDescription: Allow office network to access
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 202.79.34.78/32
        
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 202.70.66.0/23
        
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 182.93.83.51/32

        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 202.166.206.0/23
        
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
     


  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Condition: ShouldCreateRDS
    Properties: 
      DBSubnetGroupDescription: "Database Default Group"
      DBSubnetGroupName: 
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - "-DBGroup"
      SubnetIds:
        - Ref: PublicSubnetA
        - Ref: PublicSubnetB
      

  RDSInstance: 
    Type: AWS::RDS::DBInstance
    Condition: ShouldCreateRDS
    Properties: 
      AllocatedStorage: "20"
      DBInstanceClass: "db.t2.micro"
      Engine: "MySQL"
      EngineVersion: "5.6.41"
      MultiAZ: false
      MasterUsername: 
        Ref: "DBUser"
      MasterUserPassword: 
        Ref: "DBPassword"
      CopyTagsToSnapshot: true
      DBInstanceIdentifier:
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-database"
      DBName: 
        Fn::Join:
          - ""
          - Fn::Split:
            - "-"
            - Ref: "AWS::StackName"
        
      DeletionProtection: true
      PubliclyAccessible: true      
      VPCSecurityGroups:
        -
          Ref: RDSSecurityGroup
      DBSubnetGroupName: 
        Ref: DBSubnetGroup
      
      StorageType: "gp2"
      
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"
  
  {% for stage in list %}  

  WebsiteBucket{{stage}}:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-website-{{stage}}"
      WebsiteConfiguration:
        #ErrorDocument: String
        IndexDocument: index.html
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"


  WebsiteBucketPolicy{{stage}}: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: "WebsiteBucket{{stage}}"
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - "arn:aws:s3:::"
                  - 
                    Ref: "WebsiteBucket{{stage}}"
                  - "/*"
            Principal: "*"
            #Condition: 
            #  StringLike: 
            #    aws:Referer: 
            #      - "http://www.example.com/*"
            #      - "http://example.com/*"
      
  
  {% endfor %}


  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-website"
      WebsiteConfiguration:
        #ErrorDocument: String
        IndexDocument: index.html
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"


  WebsiteBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: "WebsiteBucket"
      PolicyDocument: 
        Statement: 
          - 
            Action: 
              - "s3:GetObject"
            Effect: "Allow"
            Resource: 
              Fn::Join: 
                - ""
                - 
                  - "arn:aws:s3:::"
                  - 
                    Ref: "WebsiteBucket"
                  - "/*"
            Principal: "*"
            #Condition: 
            #  StringLike: 
            #    aws:Referer: 
            #      - "http://www.example.com/*"
            #      - "http://example.com/*"
      
                
  BuildArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-artifacts"
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"

  DeployerUser:
    Type: AWS::IAM::User
    Properties:
      UserName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-deployer"
      
      Policies:
        - PolicyName: "AWSAPIGatewayFullAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "apigateway:*"
                Resource: "arn:aws:apigateway:*::*"

        - PolicyName: "AWSPassLambdaRole"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  Fn::GetAtt:
                    - LambdaExecutionRole
                    - Arn

        - PolicyName: "AWSS3ReadWriteAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - Ref: "BuildArtifactsBucket"
                      - "/*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: "WebsiteBucket"                        
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - Ref: "WebsiteBucket"
                        - "/*"
          
        - PolicyName: "AWSCloudformationFullAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:cloudformation:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":stack/"
                        - Ref: "AWS::StackName"
                        - "*/*"

                  - Fn::Join:
                      - ""
                      - - "arn:aws:cloudformation:"
                        - Ref: "AWS::Region"
                        - ":"
                        - Ref: "AWS::AccountId"
                        - ":stackset/*:*"
              - Effect: Allow
                Action:
                  - "cloudformation:GetTemplateSummary"
                Resource:
                  - "*"
          
        - PolicyName: "AWSServerlessAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:cloudformation:"
                        - Ref: "AWS::Region"
                        - ":aws:transform/Serverless-2016-10-31"
        
        - PolicyName: "CloudfrontCreateInvalidation"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudfront:CreateInvalidation"
                Resource: '*'
                        
        - PolicyName: "LambdaExecutionRole"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:lambda:"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":function:"
                      - Ref: "AWS::StackName"
                      - "-*"

        - PolicyName: AWSDescribeSecurityGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSecurityGroups
                Resource: '*'
        
        - PolicyName: "AWSDescribeSubnet"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DescribeNetworkInterfaces 
                Resource: '*'
      
  
  DeployerUserCredential:
    Type: AWS::IAM::AccessKey
    Properties:
      Status: "Active"
      UserName:
        Ref: DeployerUser
          
  
  DeveloperRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-developer"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - Ref: "AWS::AccountId"
                  - ":root"
          Action: sts:AssumeRole

      Policies:
        - PolicyName: AWSCloudWatchLogReadonlyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:TestMetricFilter
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:FilterLogEvents
              Resource:
                Fn::Join:
                    - ""
                    - - "arn:aws:logs:::"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":log-group:"
                      - Ref: "AWS::StackName"
                      - "-*"
     
     
  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      Path: '/'
      # Path: Fn::Join: ['/',['',Fn::Join: ['_', Fn::Split: [ "-" ,Ref: 'AWS::StackName']  ],''] ]
      Policies:
        - PolicyName: 
            Fn::Join:
              - ""
              - - "assumed-"
                - Ref: "AWS::StackName"
                - "-role"
                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"
     


  DevOpsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-devops"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
                - ""
                - - "arn:aws:iam::"
                  - Ref: "AWS::AccountId"
                  - ":root"
          Action: sts:AssumeRole      

      Policies:
        - PolicyName: AWSCloudWatchLogFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:DescribeExportTasks
                - logs:DeleteResourcePolicy
                - logs:PutResourcePolicy
                - logs:PutDestinationPolicy
                - logs:CancelExportTask
                - logs:TestMetricFilter
                - logs:DeleteDestination
                - logs:PutDestination
                - logs:CreateLogGroup
                - logs:DescribeResourcePolicies
                - logs:DescribeDestinations
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:*
              Resource:
                - Fn::Join:
                    - ""
                    - - "arn:aws:logs:::"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":log-group:"
                      - Ref: "AWS::StackName"
                      - "-*"
                - Fn::Join:
                    - ""
                    - - "arn:aws:logs:::"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":log-group:"
                      - Ref: "AWS::StackName"
                      - "-*:*:*"

        - PolicyName: "LambdaExecutionRole"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:lambda:"
                      - Ref: "AWS::Region"
                      - ":"
                      - Ref: "AWS::AccountId"
                      - ":function:"
                      - Ref: "AWS::StackName"
                      - "-*"
                      
        - PolicyName: "AWSS3ReadWriteAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - Ref: "BuildArtifactsBucket"
                      - "/*"
        - PolicyName: "AWSAPIGatewayFullAccess"                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "apigateway:*"
                Resource: "arn:aws:apigateway:*::*"
                
        - PolicyName: AWSAddUserToDeveloperGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iam:AddUserToGroup
                - iam:RemoveUserFromGroup
                - iam:ListGroupsForUser
              Resource: 
                - Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: "AWS::AccountId"
                    - ":user/*"
                - Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: "AWS::AccountId"
                    - ":group/"
                    - Fn::Select:
                        - "1" 
                        - Fn::Split:
                          - "/"
                          - Fn::Select:
                              - "5" 
                              - Fn::Split:
                                - ":"
                                - Fn::GetAtt:
                                  - DeveloperGroup
                                  - Arn
            - Effect: Allow
              Action:
                - iam:GetGroup                
              Resource:                 
                - Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: "AWS::AccountId"
                    - ":group/"
                    - Fn::Select:
                        - "1" 
                        - Fn::Split:
                          - "/"
                          - Fn::Select:
                              - "5" 
                              - Fn::Split:
                                - ":"
                                - Fn::GetAtt:
                                  - DeveloperGroup
                                  - Arn

            - Effect: Allow
              Action:
                - iam:ListUsers
                - iam:ListGroups              
              Resource: "*"
        
      
      #ManagedPolicyArns:
      #   - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
    

                   
  DevOpsGroup:
    Type: AWS::IAM::Group
    Properties:
      Path: '/'
      # Path: Fn::Join: ['/',['',Fn::Join: ['_', Fn::Split: [ "-" ,Ref: 'AWS::StackName']  ],''] ]
      Policies:
        - PolicyName: 
            Fn::Join:
              - ""
              - - "assumed-"
                - Ref: "AWS::StackName"
                - "-role"
                  
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"
     
           
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # RoleName: !Join ['',[!Ref 'AWS::StackName','-lambda-execution']]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      # Path: !Join ['/',['',!Join ['_', !Split [ "-" ,!Ref 'AWS::StackName']  ],''] ]
      
      Policies:
      - PolicyName: AWSCloudformaitonLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

      #- PolicyName: AWSDescribeSecurityGroup
      #  PolicyDocument:
      #    Version: '2012-10-17'
      #    Statement:
      #      - Effect: Allow
      #        Action:
      #          - ec2:DescribeSecurityGroups
      #        Resource: '*'
        
      ManagedPolicyArns:
         - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    
    
         
  UserToDevOpsGroupAddition:
    Type: AWS::IAM::UserToGroupAddition
    DependsOn: DevOpsGroup
    Properties:
      GroupName:
        Fn::Select:
          - "1" 
          - Fn::Split:
            - "/"
            - Fn::Select:
                - "5" 
                - Fn::Split:
                  - ":"
                  - Fn::GetAtt:
                    - DevOpsGroup
                    - Arn
        
      Users: 
        Ref: DevOpsUser
      

  #DomainCertificate:
  #  Type: 'AWS::CertificateManager::Certificate'
  #  Properties:
  #    DomainName: 
  #      Ref: SubDomainName
  #    ValidationMethod: DNS
  #    SubjectAlternativeNames:
  #      - Fn::Join:
  #          - ""
  #          - - "*."
  #            - Ref: SubDomainName
  #      - Fn::Join:
  #          - ""
  #          - - "www."
  #            - Ref: SubDomainName

  #DomainName:
  #  Type: 'AWS::ApiGateway::DomainName'
  #  Properties:
  #    DomainName:
  #      Ref: SubDomainName
  #    CertificateArn:
  #      Ref: CertificateARN
 #     EndpointConfiguration:
 #       Types: 
 #         - REGIONAL

  {% for stage in list %}  

  CloudfrontDistribution{{stage}}:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:        
        Aliases:
          {% if 'prod' == stage %}
          - Ref: RootDomainName
          {% else %}
          - Fn::Sub: {{stage}}.${RootDomainName}
          {% endif %}
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        ViewerCertificate:
          AcmCertificateArn:
            Ref: CertificateARN
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016

        DefaultCacheBehavior:
          TargetOriginId:
            Fn::Join:
                - ""
                - - "S3-"
                  - Ref: "AWS::StackName"
                  - "-website"
          ViewerProtocolPolicy: allow-all
          MaxTTL: 1
          DefaultTTL: 0
          MinTTL: 0
          AllowedMethods: 
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
        CacheBehaviors:       
              
          - TargetOriginId:
              Fn::Join:
                  - ""
                  - - "custom-"
                    - Ref: BaseRestApi{{stage}}
                    - ".execute-api."
                    - Ref: "AWS::Region"
                    - ".amazonaws.com/default"
              
            PathPattern: "/api"
            ViewerProtocolPolicy: https-only
            AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            MaxTTL: 1
            DefaultTTL: 0
            MinTTL: 0
            ForwardedValues:
              Cookies:
                Forward: all
              QueryString: true
              Headers:
                - 'Authorization'

          - TargetOriginId:
              Fn::Join:
                  - ""
                  - - "custom-"
                    - Ref: BaseRestApi{{stage}}
                    - ".execute-api."
                    - Ref: "AWS::Region"
                    - ".amazonaws.com/default"
              
            PathPattern: "/api/*"
            ViewerProtocolPolicy: https-only
            AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            
            MaxTTL: 1
            DefaultTTL: 0
            MinTTL: 0
            
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
              Headers:
                - 'Authorization'

          - TargetOriginId:
              Fn::Join:
                  - ""
                  - - "S3-Website-"
                    - Ref: "AWS::StackName"
                    - "-website.s3-website."
                    - Ref: "AWS::Region"
                    - ".amazonaws.com"  
              
            PathPattern: "*"
            MaxTTL: 1
            DefaultTTL: 0
            MinTTL: 0
            ViewerProtocolPolicy: allow-all
            AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
        
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: ''
            DomainName:
              Fn::GetAtt:
                - BuildArtifactsBucket
                - DomainName
            Id:
              Fn::Join:
                - ""
                - - "S3-"
                  - Ref: "AWS::StackName"
                  - "-website"
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only

            DomainName:
              Fn::Join:
                - ""
                - - Ref: BaseRestApi{{stage}}
                  - ".execute-api."
                  - Ref: "AWS::Region"
                  - ".amazonaws.com"
                  
            Id:
              Fn::Join:
                - ""
                - - "custom-"
                  - Ref: BaseRestApi{{stage}}
                  - ".execute-api."
                  - Ref: "AWS::Region"
                  - ".amazonaws.com/default"
                  
            OriginPath: "/default"
        
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only

            DomainName:
              Fn::Join:
                - ""
                - - Ref: "AWS::StackName"
                  - "-website-{{stage}}.s3-website."
                  - Ref: "AWS::Region"
                  - ".amazonaws.com"
                  
            Id:
              Fn::Join:
                - ""
                - - "S3-Website-"
                  - Ref: "AWS::StackName"
                  - "-website.s3-website."
                  - Ref: "AWS::Region"
                  - ".amazonaws.com" 
            #OriginPath: "/{{stage}}"
            
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"
        

  DomainDNSRecord{{stage}}:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: 
        Ref: HostedZoneName
      Comment: DNS name for domain name.
      Name:
        {% if 'prod' == stage %}
        Fn::Sub: ${RootDomainName}
        {% else %}
        Fn::Sub: {{stage}}.${RootDomainName}
        {% endif %}               
      Type: A
      #TTL: '60'
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - CloudfrontDistribution{{stage}}
            - DomainName
        HostedZoneId: Z2FDTNDATAQYW2


  BaseRestApi{{stage}}:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 
        Fn::Join:
          - ""
          - Fn::Split:
            - "-"
            - Fn::Sub: "${AWS::StackName}-{{stage}}"
      BinaryMediaTypes:
        - Ref: RestApiBinaryMediaTypes

  #    EndpointConfiguration:
  #      Types: 
  #        - REGIONAL
      


  
  ApiMap{{stage}}: 
    Type: AWS::ApiGateway::Resource
    Properties: 
      RestApiId: 
        Ref: "BaseRestApi{{stage}}"
      ParentId: 
        Fn::GetAtt: 
          - "BaseRestApi{{stage}}"
          - "RootResourceId"
      PathPart: "api"
      

  MethodRoot{{stage}}:
    DependsOn: "BaseRestApi{{stage}}"
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Fn::GetAtt:
          - BaseRestApi{{stage}}
          - RootResourceId
      RestApiId:
        Ref: BaseRestApi{{stage}}
      AuthorizationType: NONE
      
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
     

  ApiDeployment{{stage}}: 
    DependsOn: "MethodRoot{{stage}}"
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: 
        Ref: BaseRestApi{{stage}}
      Description: "Default Deployment"
      #StageName: "default"
     


  DefaultStage{{stage}}:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: default
      Description: Default Stage
      RestApiId: 
        Ref: BaseRestApi{{stage}}
      DeploymentId:
        Ref: ApiDeployment{{stage}}
      #DocumentationVersion: !Ref MyDocumentationVersion
      #ClientCertificateId: !Ref ClientCertificate
      Variables:
        Stack: default
      #MethodSettings:
      #  - ResourcePath: /
      #    HttpMethod: GET
      #    MetricsEnabled: 'true'
      #    DataTraceEnabled: 'true'
      #  - ResourcePath: /stack
      #    HttpMethod: POST
      #    MetricsEnabled: 'true'
      #    DataTraceEnabled: 'true'
      #    ThrottlingBurstLimit: '999'
      #  - ResourcePath: /stack
      #    HttpMethod: GET
      #    MetricsEnabled: 'true'
      #    DataTraceEnabled: 'true'
      #    ThrottlingBurstLimit: '555'
      Tags: 
        - 
          Key: "Name"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Project"
          Value: 
            Ref: "ProjectName"
        - 
          Key: "Customer"
          Value: 
            Ref: "ProjectCustomer"
        - 
          Key: "Type"
          Value: 
            Ref: "ProjectType"
        - 
          Key: "Description"
          Value: 
            Ref: "ProjectDescription"
        - 
          Key: "Deployment"
          Value: 
            Ref: "ProjectDeployment"

    
    {% endfor %}

    

  #CORSROOT:
  #  DependsOn: "BaseRestApi"
  #  Type: AWS::ApiGateway::Method
  #  Properties:
  #    HttpMethod: OPTIONS
  #    ResourceId:
  #      Fn::GetAtt:
  #        - BaseRestApi
  #        - RootResourceId
  #    RestApiId:
  #      Ref: BaseRestApi
  #    AuthorizationType: NONE
  #    Integration:
  #      IntegrationResponses:
  #      - StatusCode: 200
  #        ResponseParameters:
  #          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #          method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #          method.response.header.Access-Control-Allow-Origin: "'*'"
  #        ResponseTemplates:
  #          application/json: ''
  #      PassthroughBehavior: WHEN_NO_MATCH
  #      RequestTemplates:
  #        application/json: '{"statusCode": 200}'
  #      Type: MOCK
  #    MethodResponses:
  #   - StatusCode: 200
  #      ResponseModels:
  #        application/json: 'Empty'
  #      ResponseParameters:
  #          method.response.header.Access-Control-Allow-Headers: false
  #          method.response.header.Access-Control-Allow-Methods: false
  #          method.response.header.Access-Control-Allow-Origin: false

  #MethodRoot:
  #  DependsOn: "BaseRestApi"
  #  Type: AWS::ApiGateway::Method
  #  Properties:
  #    HttpMethod: GET
  #    ResourceId:
  #      Fn::GetAtt:
  #        - BaseRestApi
  #        - RootResourceId
  #    RestApiId:
  #      Ref: BaseRestApi
  #    AuthorizationType: NONE
  #    
  #    Integration:
  #      IntegrationResponses:
  #      - StatusCode: 200
  #        ResponseTemplates:
  #          application/json: ''
  #      PassthroughBehavior: WHEN_NO_MATCH
  #      RequestTemplates:
  #        application/json: '{"statusCode": 200}'
  #      Type: MOCK
  #    MethodResponses:
  #    - StatusCode: 200
  #      ResponseModels:
  #        application/json: 'Empty'
 
  #CORSAPI:
  #  DependsOn: "BaseRestApi"
  #  Type: AWS::ApiGateway::Method
  # Properties:
  #    HttpMethod: OPTIONS
  #   ResourceId:
  #      Ref: ApiMap
  #   RestApiId:
  #      Ref: BaseRestApi
  #    AuthorizationType: NONE
  #    Integration:
  #      IntegrationResponses:
  #      - StatusCode: 200
  #        ResponseParameters:
  #          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #          method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
  #          method.response.header.Access-Control-Allow-Origin: "'*'"
  #        ResponseTemplates:
  #          application/json: ''
  #      PassthroughBehavior: WHEN_NO_MATCH
  #      RequestTemplates:
  #        application/json: '{"statusCode": 200}'
  #      Type: MOCK
  #    MethodResponses:
  #    - StatusCode: 200
  #      ResponseModels:
  #        application/json: 'Empty'
  #      ResponseParameters:
  #          method.response.header.Access-Control-Allow-Headers: false
  #          method.response.header.Access-Control-Allow-Methods: false
  #          method.response.header.Access-Control-Allow-Origin: false
  
  #MethodAPI:
  #  DependsOn: "BaseRestApi"
  #  Type: AWS::ApiGateway::Method
  #  Properties:
  #    HttpMethod: ANY
  #    ResourceId:
  #      Ref: ApiMap
  #    RestApiId:
  #      Ref: BaseRestApi
  #    AuthorizationType: NONE
  #    
  #    Integration:
  #      IntegrationResponses:
  #      - StatusCode: 200
  #        ResponseTemplates:
  #          application/json: ''
  #      PassthroughBehavior: WHEN_NO_MATCH
  #      RequestTemplates:
  #        application/json: '{"statusCode": 200}'
  #      Type: MOCK
  #    MethodResponses:
  #    - StatusCode: 200
  #      ResponseModels:
  #        application/json: 'Empty'

  #ApiDeployment: 
    #DependsOn: "MethodRoot"
  #  Type: AWS::ApiGateway::Deployment
  #  Properties: 
  #    RestApiId: 
  #      Ref: BaseRestApi
  #    Description: "Default Deployment"
      #StageName: "default"

  #APIGateway:
  #  Type: AWS::ApiGateway::BasePathMapping
  #  Properties:
  #    BasePath: 
  #      Ref: BasePath
  #    DomainName:
  #      Ref: DomainName
  #    RestApiId:
  #      Ref: BaseRestApi
  #    Stage: "default"

  


Outputs:
  StackName:
    Description: Foundation stack name
    Value:
      Ref: "AWS::StackName"
    
  StackRegion:
    Description: Project Region
    Value:
      Ref: "AWS::Region"
  
  BucketName:
    Description: Bucket name
    Value:
      Ref: "BuildArtifactsBucket"

  SAMDeployerUserCredentialSecretAccessKey:
    Description: Deployer user key
    Value:
      Fn::GetAtt:
        - DeployerUserCredential
        - SecretAccessKey
  
  SAMDeployerUserCredentialSecretAccessKeyId:
    Description: Deployer user key id
    Value: 
      Ref: DeployerUserCredential
      
  SAMDeployerUser:
    Description: Deployer user is used in CI/CD pipeline for deploying SAM application
    Value:
      Fn::GetAtt:
        - DeployerUser
        - Arn

  RDSEndpoint:
    Description: Endpoint of RDS
    Condition: ShouldCreateRDS
    Value:
      Fn::GetAtt:
        - RDSInstance
        - Endpoint.Address
    

  SAMLambdaExecutionRole:
    Description: Lambda execution role
    Value:
      Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-lambda-execution-role"

  SAMLAssociateVPC:
    Description: Lambda accociated vpc
    Value:
      Fn::Sub: VpcId
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-lambda-associate-vpc"
  
  PrivateSubnetA:
    Description: Lambda private subnet A
    Value:
      Fn::Sub: ${PrivateSubnetA}
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-private-subnet-a"


  PrivateSubnetB:
    Description: Lambda private subnet B
    Value:
      Fn::Sub: ${PrivateSubnetB}
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-private-subnet-b"
  
  IsRDSPresent:
    Description: RDS state
    Value:
      Fn::Sub: ${CreateRDS}
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-rds-state"
  
  {% for stage in list %}  

  RestApiId{{stage}}:
    Description: Api  reference of api gateway
    Value:
      Ref: BaseRestApi{{stage}}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-rest-api-id-{{stage}}"
  
  RestApiRootId{{stage}}:
    Description: Api Root id
    Value:
      Fn::GetAtt: 
        - "BaseRestApi{{stage}}"
        - "RootResourceId"
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-rest-api-root-id-{{stage}}"
  

  APIGatewayAPIRef{{stage}}:
    Description: Api path reference of api gateway
    Value:
      Ref: ApiMap{{stage}}
    Export:
      Name:
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-api-path-reference-{{stage}}"
  {% endfor %}  
    
  RDSSecurityGroup:
    Description: RDS Security group
    #Condition: ShouldCreateRDS
    Value:
      Ref: RDSSecurityGroup
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-rds-security-group"
  
  # Tag section
  ProjectNameTag:
    Description: Project Name
    Value:
      Ref: ProjectName
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-tag-project-name"

  ProjectCustomerTag:
    Description: Project Name
    Value:
      Ref: ProjectCustomer
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-tag-project-customer"
  ProjectTypeTag:
    Description: Project Name
    Value:
      Ref: ProjectType
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-tag-project-type"
  ProjectDescriptionTag:
    Description: Project Name
    Value:
      Ref: ProjectDescription
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-tag-project-description"
  ProjectDeploymentTag:
    Description: Project Name
    Value:
      Ref: ProjectDeployment
    Export:
      Name: 
        Fn::Join:
          - ""
          - - Ref: "AWS::StackName"
            - "-tag-project-deployment"
